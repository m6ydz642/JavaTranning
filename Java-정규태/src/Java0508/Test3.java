package Java0508;

class Parent01 {
	public void pprn() {
		System.out.println("슈퍼클래스 : pprn() ");
	}
}

class Child01 extends Parent01{
	public void cprn() {
		System.out.println("서브 클래스 : cprn() ");
	}
}

public class Test3 {

	public static void main(String[] args) {
		/*
		 * 기본현 형변환 : 기본형타입의 데이터를 메모리 크기에 따른 형변환
		 * 1) 자동형변환 (묵시적 형변환) : 메모리가 작은곳 -> 큰곳 (자동으로 타입변경)
		 * 2) 강제형변환 (명시적 형변환) : 큰 -> 작은곳으로 사용자가 강제로 타입을 지정
		 * 								-> 컴파일에러 발생을 감수하고 진행
		 * 
		 * */
		int a = 10;
		long b = 20L;
		System.out.println(b);
		b = a; // 자동형변환 (묵시적 형변환) 
		a = (int)b; // 명시적 형변환
		System.out.println(a + " " + b);

		 /*
		 *  
		 *  레퍼런스 형변환 : 객체들 사이에서 형변환이 발생하는 것
		 * 
		 * 학생 객체 <-> 자동차 객체 = X 
		 * 
		 * 승용차 객체 <-> 택시 객체 = O
		 * 
		 * -> 객체사이의 관계가 필요하다 (클래스 상속) 
		 * 반드시 상속관계일때만 참조형 형변환 가능
		 *
		 *
		 * 1) 자동으로 형변환 -> 업 캐스팅(UpCasting)
		   2) 강제로 형변환 -> 다운 캐스팅 (DownCasting)
		   
		    업 캐스팅 : 서브클래스의 타입을 슈퍼클래스 타입으로 변경 (상속이라는 전제가 깔림) 
		    
		    -> 2) 슈퍼클래스의 레퍼런스가 서브클래스의 인스턴스를 가리키는 것
		    -> 3) 하위 클래스의 레퍼런스 값이 상위클래스의 래퍼런스 변수에 저장 되는 것
		    	  상위클래스 타입으로 형변환 하는 것
		    	  
		     -> 부모의 타입으로 형변환 (방향이 아래 -> 위) (업캐스팅)
		      
		    	  
		   
		 * */
		System.out.println("--------------------------------------------------");
		System.out.println("상속");
		Parent01 p = new Parent01();
		p.pprn();
		System.out.println();
		Child01 c = new Child01();
		c.cprn();
		c.pprn();
		System.out.println("---------------------------------------------------");
		System.out.println("업 캐스팅");
		
		// 슈퍼클래스의 레퍼런스 
//		Parent01 p1;
//		// 서브클래스의 인스턴스 
//		new Child01();

		Parent01 p1 = new Child01(); // 상속관계라서 자동으로 upcasting 됨
		// -> 업캐스팅 (child가 parent타입으로 변경된거임)
		// ->parent01 상태나 마찬가지 
		p1.pprn();
		// p1.cprn(); // 부모클래스랑 동일하게 자식 클래스는 사용 못함
		/* child는 은닉됨
		 up캐스팅시 상속받은 부분만 쓸 수 있다.
		 
		   p1.cprn(); (x)
		   -> 업캐스팅 이후에는 상속받은 부분만 사용이 가능하다.
		   -> 참조영역의 축소가 발생 한다. 
		   (존재는 하는데 접근이 안됨) 
		   
		*/
		Parent01 p2;
		Child01 c2 = new Child01();
		
		p2 = c2; // 업캐스팅
		
		/* 업 캐스팅
		 * - 부모로부터 상속받은 부분만 사용하고, 나머지는 사용을 포기하겠다.
		 * - 슈퍼클래스 타입으로 형변환 
		 * - 참조 가능한 영역이 축소됨. 
		 * - 컴파일러가 자동으로 형변환 
		 * - 
		 * 
		 * 
		 * 업캐스팅 : 슈퍼클래스의 레퍼런스가 서브클래스의 인스턴서를 가리키는 것
		 * 다운 캐스팅 (부모타입을 자식타입의 데이터로 변경)
		 * -> 서브클래스의 레퍼런스가 슈퍼클래스의 인스턴스를 가리키는 것
		 * 
		 * 
		 * 서브클래스 레퍼런스 
		 * Child01 c3;
		 * 슈퍼클래스 인스턴스
		 * new Parent01();
		 *  
		 * */
		
		// 다운캐스팅
		
		
		// Child01 c3 = (Child01) new Parent01();
		
		
		/*컴파일러가 자동으로 형변환을 안해서 에러발생 (컴파일에러)
		 * 
		 *  강제로 형변환( 컴파일에러 제거) -> 실행시 예외 발생
		 *  
		 * */
	//	c3.cprn();		
	//	c3.pprn(); 
		
		/* 다운캐스팅
		 * - 서브클래스 타입으로 형변환 (부모 -> 자식)
		 * - 참조 가능한 영역이 증가해야함. (x)
		 * - 컴파일러가 자동형변환 X (없는 영역을 참조할 수있기 때문에) -> 컴파일러는 확실하지 않은 데이터에 접근안함
		 * 
		 * 
		 * 안전한 다운캐스팅 
		 * 
		 * 1) 업캐스팅을 통한 데이터 보존 
		 * 2) 보존된 데이터를 다운캐스팅을 통해서 변경 
		 *
		 * 		 * */
		 // 업케스팅
		Parent01 p4 = new Child01(); // 원래는 Child01에서 업캐스팅 한거
		//	다운캐스팅 : 부모타입객체 -> 자식타입 객체 
		Child01 c4 = (Child01) p4; 

		c4.cprn();
		c4.pprn();
		
		/* 클래스간의 캐스팅시  두 단계에 걸쳐 체크를 함
		 * 언제? :컴파일할때-에러, 실행할때-예외
		 * 
		 * 다운 캐스팅
		 * - 서브클래스 형태로 형변환
		 * - 참조 가능한 영역이 확대 된다. 
		 * 
		 * - 컴파일러가 자동으로 형변환 X
		 * - 개발자가 명시적 형변환 실행 -> 컴파일 에러제거 
		 * - 상속관계에 따라서 참조하지 못하는 객체 일수도 있음  -> 예외발생
		 * (업캐스팅된 객체를 다시 다운 캐스팅 한다)
		 * 
		 * 
		 * String s = new String();
		 * Point p;
		 * 
		 * p= (Point)s; -> 컴파일에러 
		 */

	}

}
