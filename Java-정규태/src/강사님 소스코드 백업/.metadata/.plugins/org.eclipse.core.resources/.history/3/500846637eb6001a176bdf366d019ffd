import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.FlowLayout;
import java.awt.Frame;
import java.awt.GridLayout;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

class FrameEx1 extends Frame{
	
	Button redBtn,blueBtn;
	
	public FrameEx1(){
		
		super("이벤트 처리");
		
		// 레이아웃 변경
		//setLayout(new FlowLayout());
		setLayout(new GridLayout(1, 2));
		
		// 버튼 객체 2개 생성
		redBtn = new Button("RED");
		blueBtn = new Button("BLUE");
		// 프레임에 추가
		this.add(redBtn,BorderLayout.EAST);
		add(blueBtn,BorderLayout.WEST);
		
		
		
		
		
		
		
		setSize(400,300);
		setVisible(true);
		
		addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				dispose();
				System.exit(0);
			}
		});
		
	}
}


public class Test1 {

	public static void main(String[] args) {

	   new FrameEx1();
	   
	   // GUI환경에서는 화면을 구현하는 부분, 이벤트를 처리하는 부분이 완전 분리
	   // 이벤트(event) : 프로그램과 사용자 사이에서 발생하는 일
	   //  => 키보드,마우스를 사용해서 해당 프로그램에 특정 요구/동작을 발생
	   // 이벤트 리스너 (event listener) : 이벤트 발생을 기다리다가 이벤트가 발생해서
	   // 이벤트 소스 객체가 전달되면 적당한 처리를 하는 객체
	   // 이벤트 소스 (event source) : 이벤트가 발생한 컴포넌트(버튼,스크롤바..)
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	   
	
	}

}
