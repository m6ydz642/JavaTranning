class Parent01{
	public void pprn(){
		System.out.println("슈퍼클래스 : pprn()");
	}
}
class Child01 extends Parent01{
	public void cprn(){
	  System.out.println("서브 클래스 : cprn()");	
	}	
}


public class Test3 {

	public static void main(String[] args) {
		// 기본형 형변환 : 기본형타입의 데이터를 메모리 크기에 따른 형변환
		// 1)자동형변환(묵시적 형변환) : 작 -> 큰  자동으로 타입변경
		// 2)강제형변환(명시적 형변환) : 큰 -> 작 사용자가 강제로 타입을 지정
		//                        => 컴파일에러 발생을 감수하고 진행
		
		int a = 10;
		long b = 20L;
		
		b = a; // 묵시적 형변환
		a = (int)b; // 명시적 형변환 
		
		
		
		//레퍼런스 형변환 : 객체들 사이에서 형변환이 발생하는것 
		
		// 학생 객체 <-> 자동차 객체 => X
		// 승용차 객체 <-> 택시 객체 => ㅇ
		// => 객체사이의  관계가 필요하다 ( 클래스 상속 )
		// * 반드시 상속관계일때만 참조형 형변환 가능
		
		// 1) 자동으로 형변환 => 업 캐스팅(UpCasting)
		// 2) 강제로 형변환  => 다운 캐스팅(DownCasting)
		
		
		// * 업 캐스팅 :
		//  1) 서브클래스의 타입을 슈퍼클래스 타입으로 변경
		//  2) 슈퍼클래스의 레퍼런스가 서브클래스의 인스턴스를 가리키는것
		//  3) 하위 클래스의 레퍼런스 값이 상위클래스의 레퍼런스 변수에 저장되는것
		//     상위클래스 타입으로 형변환 하는것
		
		// * 부모의 타입으로 형변환  (방향이 아래 -> 위) 
		
		
		System.out.println("-------------------------------");
		
		System.out.println("상속");
		Parent01 p = new Parent01();
		p.pprn();
		System.out.println();
		
		Child01 c = new Child01();
		c.cprn();
		c.pprn();
		System.out.println("--------------------");
		System.out.println("업 캐스팅");
		
		// 슈퍼클래스의 레퍼런스
		//Parent01 p1;
		// 서브클래스의 인스턴스
		//new Child01();
		
		Parent01 p1 = new Child01();
		// => 업캐스팅
		p1.pprn();
		// p1.cprn(); (x)
		// => 업캐스팅 이후에는 상속받은 부분만 사용이 가능하다.
		// => 참조영역의 축소가 발생한다.
		
		Parent01 p2;
		Child01 c2 = new Child01();
		
		p2 = c2; // 업캐스팅 
		
		// * 업 캐스팅 
		// - 부모로 부터 상속받은 부분만 사용하고, 나머지는 사용을 포기하겠다.
		// - 슈퍼클래스 타입으로 형변환
		// - 참조 가능한 영역이 축소됨.
		// - 컴파일러가 자동으로 형변환
		
		
		// 업캐스팅 : 슈퍼클래스의 레퍼런스가 서브클래스의 인스턴스를 가리키는것

		// * 다운 캐스팅 : 부모타입의 데이터를 자식타입의 데이터로 변경
		// => 서브클래스의 레퍼런스가 슈퍼클래스의 인스턴스를 가리키는것
		
		// 서브클래스 레퍼런스
		// Child01 c3;
		// 슈퍼클래스 인스턴스
		// new Parent01();
		
		// 다운캐스팅
    	//Child01 c3 = new Parent01();
		// => 컴파일러가 자동으로 형변환을 안해서 에러 발생(컴파일에러)
		/*Child01 c3 =(Child01) new Parent01();
		c3.pprn();
		c3.cprn();*/
		// => 강제로 형변환 (컴파일에러 제거) -> 실행시 예외 발생
		
		// * 다운캐스팅 
		// - 서브클래스 타입으로 형변환 (부모-> 자식)
		// - 참조 가능한 영역이 증가해야함. (x)
		// - 컴파일러가 자동형변환 X (없는 영역을 참조할수 있기 때문에)
		
		// 안전한 다운캐스팅 
		// 1) 업캐스팅을 통한 데이터 보존
		// 2) 보존된 데이터를 다운캐스팅을 통해서 변경
		
		// 업캐스팅
		Parent01 p4 = new Child01();
		// 다운캐스팅 : 부모타입객체 -> 자식타입 객체 
		// Child01 c4 = p4; 
		Child01 c4 = (Child01)p4;
		c4.cprn();
		c4.pprn();
		
		// * 클래스간의 캐스팅시 두 단계에 걸처 체크를함.
		// (컴파일-에러, 실행-예외)
		
		// * 다운 캐스팅
		// - 서브클래스 형태로 형변환
		// - 참조 가능한 영역이 확대 된다.
		// - 컴파일러가 자동으로 형변환 X
		// - 개발자가 명시적 형변환 실행 => 컴파일 에러제거
		// - 상속관계에 따라서 참조하지 못하는 객체 일수도 있음 => 예외 발생
		//  (업캐스팅된 객체를  다시 다운 캐스팅 한다)
		
		
		/*
		  String s = new String();
		  Point p;
		  
		  p = (Point)s; => 컴파일에러 
		*/
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

	}

}
